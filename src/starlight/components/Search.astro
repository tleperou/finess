---
import project from 'virtual:starlight/project-context'
import type { Props } from '@astrojs/starlight/props'
import IconSearch from './../user-components/icons/icon-search.astro'

const { labels } = Astro.props

const isDev = import.meta.env.DEV

const pagefindTranslations = {
  placeholder: labels['search.label'],
  ...Object.fromEntries(
    Object.entries(labels)
      .filter(([key]) => key.startsWith('pagefind.'))
      .map(([key, value]) => [key.replace('pagefind.', ''), value])
  ),
}
---

<site-search
  data-translations={JSON.stringify(pagefindTranslations)}
  data-strip-trailing-slash={project.trailingSlash === 'never'}
>
  <button
    data-open-modal
    disabled
  >
    <IconSearch aria-label={labels['search.label']} />
    <span aria-hidden="true">{labels['search.label']}</span>
  </button>

  <dialog aria-label={labels['search.label']}>
    <button data-close-modal>
      {labels['search.cancelLabel']}
    </button>
    {
      isDev ? (
        <pre>{labels['search.devWarning']}</pre>
      ) : (
        <div id="starlight__search" />
      )
    }
  </dialog>
</site-search>

<style>
  button[data-open-modal] {
    display: flex;
    align-items: center;
    column-gap: var(--column-gap-1);
    background-color: transparent;
    width: 100%;
    inline-size: 100%;
    max-inline-size: var(--inline-size-2);
    min-inline-size: max-content;

    @media (--breakpoint-sm-only) {
      display: flex;
      place-content: center;
      font-size: var(--font-size-2);
      height: var(--line-height-2);
      width: var(--line-height-2);
      border-color: transparent;

      & span {
        display: none;
      }
    }
  }
</style>

<script>
  class SiteSearch extends HTMLElement {
    constructor() {
      super()
      const openBtn = this.querySelector<HTMLButtonElement>(
        'button[data-open-modal]'
      )!
      const closeBtn = this.querySelector<HTMLButtonElement>(
        'button[data-close-modal]'
      )!
      const dialog = this.querySelector('dialog')!
      const dialogFrame = this.querySelector('.dialog-frame')!

      /** Close the modal if a user clicks on a link or outside of the modal. */
      const onClick = (event: MouseEvent) => {
        const isLink = 'href' in (event.target || {})
        if (
          isLink ||
          (document.body.contains(event.target as Node) &&
            !dialogFrame.contains(event.target as Node))
        ) {
          closeModal()
        }
      }

      const openModal = (event?: MouseEvent) => {
        dialog.showModal()
        document.body.toggleAttribute('data-search-modal-open', true)
        this.querySelector('input')?.focus()
        event?.stopPropagation()
        window.addEventListener('click', onClick)
      }

      const closeModal = () => dialog.close()

      openBtn.addEventListener('click', openModal)
      openBtn.disabled = false
      closeBtn.addEventListener('click', closeModal)

      dialog.addEventListener('close', () => {
        document.body.toggleAttribute('data-search-modal-open', false)
        window.removeEventListener('click', onClick)
      })

      // Listen for `/`, `ctrl + k`, and `cmd + k` keyboard shortcuts.
      window.addEventListener('keydown', e => {
        const isInput =
          document.activeElement instanceof HTMLElement &&
          (['input', 'select', 'textarea'].includes(
            document.activeElement.tagName.toLowerCase()
          ) ||
            document.activeElement.isContentEditable)
        if ((e.metaKey === true || e.ctrlKey === true) && e.key === 'k') {
          dialog.open ? closeModal() : openModal()
          e.preventDefault()
        } else if (e.key === '/' && !dialog.open && !isInput) {
          openModal()
          e.preventDefault()
        }
      })

      let translations = {}
      try {
        translations = JSON.parse(this.dataset.translations || '{}')
      } catch {}

      const shouldStrip = this.dataset.stripTrailingSlash !== undefined
      const stripTrailingSlash = (path: string) =>
        path.replace(/(.)\/(#.*)?$/, '$1$2')
      const formatURL = shouldStrip
        ? stripTrailingSlash
        : (path: string) => path

      window.addEventListener('DOMContentLoaded', () => {
        if (import.meta.env.DEV) return
        const onIdle = window.requestIdleCallback || (cb => setTimeout(cb, 1))
        onIdle(async () => {
          // @ts-expect-error â€” Missing types for @pagefind/default-ui package.
          const { PagefindUI } = await import('@pagefind/default-ui')
          new PagefindUI({
            element: '#starlight__search',
            baseUrl: import.meta.env.BASE_URL,
            bundlePath:
              import.meta.env.BASE_URL.replace(/\/$/, '') + '/pagefind/',
            showImages: false,
            translations,
            showSubResults: true,
            processResult: (result: {
              url: string
              sub_results: Array<{ url: string }>
            }) => {
              result.url = formatURL(result.url)
              result.sub_results = result.sub_results.map(sub_result => {
                sub_result.url = formatURL(sub_result.url)
                return sub_result
              })
            },
          })
        })
      })
    }
  }
  customElements.define('site-search', SiteSearch)
</script>
