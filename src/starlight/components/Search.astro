---
import project from 'virtual:starlight/project-context'
import type { Props } from '@astrojs/starlight/props'
import IconSearch from './../user-components/icons/icon-search.astro'

import './../user-components/pagefind.css'

const { labels } = Astro.props

const isDev = import.meta.env.DEV

const pagefindTranslations = {
  placeholder: labels['search.label'],
  ...Object.fromEntries(
    Object.entries(labels)
      .filter(([key]) => key.startsWith('pagefind.'))
      .map(([key, value]) => [key.replace('pagefind.', ''), value])
  ),
}
---

<site-search
  data-translations={JSON.stringify(pagefindTranslations)}
  data-strip-trailing-slash={project.trailingSlash === 'never'}
>
  <button class="trigger">
    <IconSearch aria-label={labels['search.label']} />
    <span>{labels['search.label']}</span>
    <kbd>/</kbd>
  </button>

  <dialog aria-label={labels['search.label']}>
    <form
      method="dialog"
      class="sr-only"
    >
      <button type="submit">
        {labels['search.cancelLabel']}
      </button>
    </form>

    {isDev && <pre>{labels['search.devWarning']}</pre>}
    <div id="starlight__search"></div>
  </dialog>
</site-search>

<style>
  button.trigger {
    display: flex;
    align-items: center;
    column-gap: var(--column-gap-1);
    background-color: transparent;
    width: 100%;
    inline-size: 100%;
    max-inline-size: var(--inline-size-2);
    color: var(--color-on-surface-2);
    min-inline-size: max-content;

    & kbd {
      --space-multiplier: 0.35;
      background-color: var(--color-surface-2);
      padding-inline: var(--padding-inline-2);
      border-radius: var(--border-radius-1);
      margin-inline-start: auto;
      font-size: var(--font-size-0);
      border: var(--border-width-1) solid var(--color-surface-3);
    }

    &:hover,
    &:focus {
      color: var(--color-on-surface-1);
    }

    @media (--breakpoint-sm-only) {
      display: flex;
      place-content: center;
      font-size: var(--font-size-2);
      height: var(--line-height-2);
      width: var(--line-height-2);
      border-color: transparent;

      & span,
      & kbg {
        display: none;
      }
    }
  }

  site-search {
    display: contents;
  }

  dialog {
    /* margin-inline: auto; */
    margin-block-start: 3vh;
    background-color: var(--color-surface-2);
  }

  :global(#starlight__search) {
    --pagefind-ui-primary: var(--color-accent-5);
    --pagefind-ui-text: var(--color-on-surface-1);
    --pagefind-ui-font: var(--font-sans);
    --pagefind-ui-background: transparent;
    --pagefind-ui-border: var(--color-surface-3);
    --pagefind-ui-border-width: var(--border-width-1);
    --sl-search-cancel-space: var(--space-inline-3);
  }

  :global(body[data-search-modal-open]) {
    overflow: hidden;
  }
</style>

<script>
  customElements.define(
    'site-search',
    class SiteSearch extends HTMLElement {
      dialog = this.querySelector<HTMLDialogElement>('dialog')!
      trigger = this.querySelector<HTMLButtonElement>('.trigger')!

      constructor() {
        super()

        this.addEventListener('click', e => this.onClose(e))
        this.trigger.addEventListener('click', e => this.onOpen(e))
        this.dialog.addEventListener('close', () => this.cleanup())
        window.addEventListener('keydown', e => this.onShortcuts(e))
        window.addEventListener('DOMContentLoaded', () => this.onSearch())
      }

      onOpen(event: MouseEvent | KeyboardEvent) {
        event.stopPropagation()
        document.body.toggleAttribute('data-search-modal-open', true)
        this.dialog.showModal()
      }

      onClose(e?: MouseEvent) {
        if (e && !this.clickedOutside(e) && !this.clickedResult(e)) {
          return
        }

        this.dialog.close()
      }

      cleanup() {
        document.body.toggleAttribute('data-search-modal-open', false)
      }

      onShortcuts(e: KeyboardEvent) {
        const el = document.activeElement
        const isInput = el instanceof HTMLInputElement && el.isContentEditable
        const slash = e.key === '/'
        const k = (e.metaKey || e.ctrlKey) && e.key === 'k'

        if (isInput) {
          return
        }

        if (!k && !slash) {
          return
        }

        this.dialog.open ? this.onClose() : this.onOpen(e)
        e.preventDefault()
      }

      clickedOutside(e: MouseEvent) {
        const target = e.target as HTMLElement
        const rect = target?.getBoundingClientRect()
        return (
          rect.left > e.clientX ||
          rect.right < e.clientX ||
          rect.top > e.clientY ||
          rect.bottom < e.clientY
        )
      }

      clickedResult(e: MouseEvent) {
        const target = e.target as HTMLElement
        return target instanceof HTMLAnchorElement
      }

      onSearch() {
        if (import.meta.env.DEV) return

        let translations = {}
        try {
          translations = JSON.parse(this.dataset.translations || '{}')
        } catch {}

        const shouldStrip = this.dataset.stripTrailingSlash !== undefined

        function stripTrailingSlash(path: string) {
          return path.replace(/(.)\/(#.*)?$/, '$1$2')
        }

        function noopFormat(path: string) {
          return path
        }

        const formatURL = shouldStrip ? stripTrailingSlash : noopFormat
        const bundlePath = `${import.meta.env.BASE_URL.replace(/\/$/, '')}/pagefind/`

        function processResult(result: {
          url: string
          sub_results: { url: string }[]
        }) {
          result.url = formatURL(result.url)
          result.sub_results = result.sub_results.map(sub_result => {
            sub_result.url = formatURL(sub_result.url)
            return sub_result
          })
        }

        const onIdle = window.requestIdleCallback || (cb => setTimeout(cb, 1))
        onIdle(async () => {
          // @ts-expect-error â€” Missing types for @pagefind/default-ui package.
          const { PagefindUI } = await import('@pagefind/default-ui')
          new PagefindUI({
            autofocus: true,
            element: '#starlight__search',
            baseUrl: import.meta.env.BASE_URL,
            bundlePath,
            showImages: false,
            translations,
            showSubResults: true,
            resetStyles: true,
            processResult,
          })
        })
      }
    }
  )
</script>
