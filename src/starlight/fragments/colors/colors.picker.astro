---
interface Props {
  color: string
}

const props = Astro.props
---

<color-picker color={props.color}>
  <label><slot /><input type="color" /></label>
</color-picker>

<script>
  customElements.define(
    'color-picker',
    class ColorPicker extends HTMLElement {
      #picker = this.querySelector<HTMLInputElement>('[type="color"]')!
      #attr = this.getAttribute('color') || ''

      get #elements() {
        return [...document.querySelectorAll(`[data-color="${this.#attr}"]`)]
      }
      get #hex() {
        const styles = window.getComputedStyle(document.body)
        return styles.getPropertyValue(`${this.#attr}`)
      }

      constructor() {
        super()

        this.#picker?.addEventListener('input', this.#onInput)
        this.#picker.value = this.#hex
        this.#emitChange(this.#hex)
      }

      #emitChange(value: string = '') {
        this.#elements.forEach(el => {
          el.textContent = value
        })
      }

      #onInput = (e: Event) => {
        const input = e.target as HTMLInputElement
        this.#updateCustomProps(input.value)
        this.#emitChange(input.value)
      }

      #updateCustomProps(value: string) {
        document.documentElement.style.setProperty(this.#attr, value)
      }

      disconnectedCallback() {
        this.#picker?.removeEventListener('input', this.#onInput)
      }
    }
  )
</script>
