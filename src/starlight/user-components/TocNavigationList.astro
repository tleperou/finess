---
import type { MarkdownHeading } from 'astro'

interface TocItem extends MarkdownHeading {
  children: TocItem[]
}

interface Props {
  toc: TocItem[]
  depth?: number
  isMobile?: boolean
}

const { toc, isMobile = false, depth = 0 } = Astro.props
---

<ul>
  {
    toc.map(heading => (
      <li>
        <a href={'#' + heading.slug}>{heading.text}</a>
        {heading.children.length > 0 && (
          <Astro.self
            toc={heading.children}
            depth={depth + 1}
            isMobile={isMobile}
          />
        )}
      </li>
    ))
  }
</ul>

<style define:vars={{ depth }}>
  ul {
    padding-inline-start: calc(var(--inline-padding-1) * var(--depth));
  }

  ul li a {
    --space-multiplier: 0.5;

    display: flex;
    align-items: center;
    column-gap: var(--column-gap-1);
    color: var(--color-surface-on-2);
    line-height: var(--line-height-1);

    &,
    &[aria-current],
    &:hover {
      background-color: transparent;
    }

    &:hover::before {
      background-color: color-mix(
        in oklab,
        35% var(--color-accent-1),
        transparent
      );
    }

    &:hover,
    &:focus {
      color: var(--color-on-surface-1);
    }

    &::before {
      display: block;
      content: '';
      width: 0.65ch;
      height: var(--line-height-1);
      background-color: transparent;
      border-radius: var(--border-radius-2);
    }

    &[aria-current] {
      font-weight: var(--font-weight-3);

      &::before {
        background-color: var(--color-accent-1);
      }
    }
  }
</style>
