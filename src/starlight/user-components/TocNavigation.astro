---
import TocNavigationList from './TocNavigationList.astro'
import type { Props } from '@astrojs/starlight/props'

const { labels, toc } = Astro.props
---

{
  toc && (
    <toc-navigation>
      <details open>
        <summary>
          <h2 class="trigger">
            <span>{labels['tableOfContents.onThisPage']}</span>
          </h2>
          <span data-current />
        </summary>
        <nav aria-orientation="vertical">
          <TocNavigationList toc={toc.items} />
        </nav>
      </details>
    </toc-navigation>
  )
}

<script>
  customElements.define(
    'toc-navigation',
    class TocNavigation extends HTMLElement {
      minH = parseInt(this.dataset.minH || '2', 10)
      maxH = parseInt(this.dataset.maxH || '3', 10)

      get current() {
        return this.querySelector<HTMLAnchorElement>('a[aria-current="true"]')
      }

      set current(link: HTMLAnchorElement | null) {
        if (link === this.current) return
        if (this.current) this.current.removeAttribute('aria-current')
        link?.setAttribute('aria-current', 'true')
        const curr = this.querySelector<HTMLAnchorElement>('[data-current]')!
        curr.innerText = link?.textContent || ''
        this.current = link
      }

      wasMobile = false
      isMobile = false
      trigger = this.querySelector('summary')!
      details = this.querySelector('details')!
      links = [...this.querySelectorAll<HTMLAnchorElement>(`a[href]`)]

      constructor() {
        super()
        window.addEventListener('resize', () => this.onResize())
        this.addEventListener('click', e => this.onNavigate(e))
        this.trackAnchor()
      }

      connectedCallback() {
        this.onResize()
      }

      onResize() {
        // @todo use custom media
        // @warn shall match css breakpoint
        this.isMobile = window.matchMedia('(0px <= width <= 1201px)').matches

        if (!this.isMobile) {
          this.details.toggleAttribute('open', true)
        } else if (!this.wasMobile && this.isMobile) {
          this.details.toggleAttribute('open', false)
        }

        this.wasMobile = this.isMobile
      }

      onNavigate(e: Event) {
        const target = e.target as HTMLAnchorElement
        if (!this.isMobile && target.closest('summary')) {
          e.preventDefault()
          return
        }

        if (this.links.indexOf(target) < 0) {
          return
        }

        if (!this.isMobile) {
          return
        }

        this.details.toggleAttribute('open', false)
      }

      // the following comes from Starlink source

      trackAnchor() {
        /** All the links in the table of contents. */
        const links = [...this.querySelectorAll('a')]

        /** Test if an element is a table-of-contents heading. */
        const isHeading = (el: Element): el is HTMLHeadingElement => {
          if (el instanceof HTMLHeadingElement) {
            // Special case for page title h1
            if (el.id === '_top') return true
            // Check the heading level is within the user-configured limits for the ToC
            const level = el.tagName[1]
            if (level) {
              const int = parseInt(level, 10)
              if (int >= this.minH && int <= this.maxH) return true
            }
          }
          return false
        }

        /** Walk up the DOM to find the nearest heading. */
        const getElementHeading = (
          el: Element | null
        ): HTMLHeadingElement | null => {
          if (!el) return null
          const origin = el
          while (el) {
            if (isHeading(el)) return el
            // Assign the previous siblingâ€™s last, most deeply nested child to el.
            el = el.previousElementSibling
            while (el?.lastElementChild) {
              el = el.lastElementChild
            }
            // Look for headings amongst siblings.
            const h = getElementHeading(el)
            if (h) return h
          }
          // Walk back up the parent.
          return getElementHeading(origin.parentElement)
        }

        /** Handle intersections and set the current link to the heading for the current intersection. */
        const setCurrent: IntersectionObserverCallback = entries => {
          for (const { isIntersecting, target } of entries) {
            if (!isIntersecting) continue
            const heading = getElementHeading(target)
            if (!heading) continue
            const link = links.find(
              link => link.hash === '#' + encodeURIComponent(heading.id)
            )
            if (link) {
              this.current = link
              break
            }
          }
        }

        // Observe elements with an `id` (most likely headings) and their siblings.
        // Also observe direct children of `.content` to include elements before
        // the first heading.
        const toObserve = document.querySelectorAll(
          'main [id], main [id] ~ *, main .content > *'
        )

        let observer: IntersectionObserver | undefined
        const observe = () => {
          if (observer) observer.disconnect()
          observer = new IntersectionObserver(setCurrent, {
            rootMargin: this.getRootMargin(),
          })
          toObserve.forEach(h => observer!.observe(h))
        }
        observe()

        const onIdle = window.requestIdleCallback || (cb => setTimeout(cb, 1))
        let timeout: NodeJS.Timeout
        window.addEventListener('resize', () => {
          // Disable intersection observer while window is resizing.
          if (observer) observer.disconnect()
          clearTimeout(timeout)
          timeout = setTimeout(() => onIdle(observe), 200)
        })
      }

      private getRootMargin(): `-${number}px 0% ${number}px` {
        // magic number to estimate the offets of the elements
        const top = -100
        const height = top + 50 - document.documentElement.clientHeight
        return `${top}px 0% ${height}px`
      }
    }
  )
</script>

<style>
  toc-navigation {
    display: contents;

    & > details {
      background-color: var(--color-surface-1);
      position: sticky;
      top: 0;

      @media (--breakpoint-sm-n-above) {
        border-color: transparent;
      }
    }
  }

  toc-navigation > details summary {
    display: flex;
    column-gap: var(--column-gap-2);
    block-size: calc(var(--block-size-1) - var(--padding-block-1) * 2);
    padding-inline: var(--padding-inline-1);
    border-color: transparent;

    &:focus-visible {
      outline: none;

      & .trigger {
        outline: var(--border-width-2) solid var(--color-accent-5);
        outline-offset: var(--border-width-2);
      }
    }

    @media (--breakpoint-md-n-above) {
      cursor: text;
      border-block-color: transparent;
    }

    @media (--breakpoint-md-n-below) {
      inline-size: max-content;

      & h2 {
        display: flex;
        align-items: center;
        padding-inline-start: var(--padding-inline-1);
        border: var(--border-width-1) solid var(--color-surface-3);
        border-radius: var(--border-radius-2);
        width: max-content;
        font-weight: var(--font-weight-1);
        transition: scale ease-out var(--transition-duration-2);
        font-size: var(--font-size-1);

        &:hover,
        &:focus {
          scale: 1.0165;
          border-color: var(--color-on-surface-2);
        }

        &::after {
          content: '';
          width: 32px;
          height: 32px;
          mask: var(--icon-chevron-inline-end-32px);
          background-color: currentColor;
          scale: 0.5;
        }

        & span {
          inline-size: max-content;
          font-size: var(--font-size-0);
        }
      }
    }

    & [data-current] {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      font-size: var(--font-size-0);

      @media (--breakpoint-md-n-above) {
        display: none;
      }
    }

    &::after {
      content: none;
    }
  }

  toc-navigation nav {
    padding-inline-start: var(--padding-inline-1);

    @media (--breakpoint-md-n-below) {
      padding-inline-start: calc(var(--padding-inline-1) * 3);
    }
  }
</style>
